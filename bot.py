from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
import sqlite3
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.callback_data import CallbackData
from aiogram.types import InlineQuery, InlineQueryResultArticle, InputTextMessageContent
import uuid
import difflib

conn = sqlite3.connect('streets.db')
cur = conn.cursor()

logging.basicConfig(level=logging.INFO)
bot = Bot(token='')
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –ö–ª–∞—Å—Å —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
class RegistrationStates(StatesGroup):
    STATE_CITY = State()    # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –≥–æ—Ä–æ–¥–∞
    STATE_STREET = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —É–ª–∏—Ü—ã
    STATE_NUMBER = State()  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ —É–ª–∏—Ü—ã
    STATE_DONE = State()    # –ó–∞–≤–µ—Ä—à–∞—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ


def create_results_from_chunk(chunk):
    # –°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö
    results = []
    for data in chunk:
        results.append(
            types.InlineQueryResultArticle(
                id=str(uuid.uuid4()),
                title=data,
                input_message_content=types.InputTextMessageContent(
                    message_text=data)
            )
        )
    return results


def sort_by_similarity(lst, query):
    # –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –∏–∑–≤–ª–µ–∫–∞—Ç—å –∫–ª—é—á —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞
    def similarity_key(elem):
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–æ–º —Å–ø–∏—Å–∫–∞ –∏ –≤–≤–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
        matcher = difflib.SequenceMatcher(None, elem, query)
        return matcher.ratio()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —Å—Ö–æ–∂–µ—Å—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏ –≤–≤–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    sorted_lst = sorted(lst, key=similarity_key, reverse=True)
    return sorted_lst


@dp.inline_handler(state='*')
async def inline_handler(query: types.InlineQuery):
    data = streets_check  # –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
    data = sort_by_similarity(data, query.query)
    offset = int(query.offset) if query.offset else 0
    limit = 50  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å –∑–∞ –æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å
    results = []
    while offset < len(data):
        chunk = data[offset:offset + limit]
        results += create_results_from_chunk(chunk)
        offset += limit
        if len(results) >= 50:
            break
    next_offset = str(offset) if offset < len(
        data) else ''  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º next_offset
    await bot.answer_inline_query(query.id, results, next_offset=next_offset)


@dp.message_handler(commands=['start', 'again', '–í–µ—Ä–Ω—É—Ç—å—Å—è'], state='*', )
async def start_handler(message: types.Message):
    global big_message, current_page
    big_message = ''
    current_page = 1
    big_message = None
    global cities_kb, streets_kb, numbers_kb
    cities_kb, streets_kb, numbers_kb = ReplyKeyboardMarkup(resize_keyboard=True, row_width=1), ReplyKeyboardMarkup(
        resize_keyboard=True, row_width=10), ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    cities_kb.add(KeyboardButton('/–í–µ—Ä–Ω—É—Ç—å—Å—è'))
    streets_kb.add(KeyboardButton('/–í–µ—Ä–Ω—É—Ç—å—Å—è'))
    numbers_kb.add(KeyboardButton('/–í–µ—Ä–Ω—É—Ç—å—Å—è'))
    global cities_check, streets_check, numbers_check
    cities_check, streets_check, numbers_check = [], [], []
    available_cities = cur.execute("SELECT DISTINCT city FROM streets")
    for i in available_cities.fetchall():
        btn = KeyboardButton(i[0])
        cities_kb.add(btn)
        cities_check.append(i[0])

    await RegistrationStates.STATE_CITY.set()
    await message.delete()
    global welcome_msg
    welcome_msg = await message.answer("üîé DEPUTEYE - –±–æ—Ç –ø–æ–∑–≤–æ–ª—è—é—â–∏–π –≤–∞–º —É–∑–Ω–∞—Ç—å –¥–µ–ø—É—Ç–∞—Ç–∞ –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–µ–Ω –Ω–∞ –≤–∞—à–µ–π —É–ª–∏—Ü–µ.\nüá∞üáø–í—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥", reply_markup=cities_kb)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ç–æ—Ä–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM (STATE_STREET)


@dp.message_handler(state=RegistrationStates.STATE_CITY)
async def city_handler(message: types.Message, state: FSMContext):
    global city
    city = message.text
    if city in cities_check:
        global streets_check
        pagination_cb = CallbackData('pagination', 'page')

        async def send_large_message(message: types.Message):
            # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç InlineKeyboardMarkup —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

            pagination_keyboard = InlineKeyboardMarkup(row_width=2)
            pagination_keyboard.add(InlineKeyboardButton(
                ">>", callback_data=pagination_cb.new(page="next")))
            # –°–æ–∑–¥–∞–µ–º –±–æ–ª—å—à–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            all_streets = cur.execute(
                f"SELECT DISTINCT name FROM streets WHERE city='{city}'")

            streets_msg = '–°–ü–†–ê–í–û–ß–ù–ò–ö\n'
            a = 0
            message_parts, streets_names = [], []
            for i in all_streets.fetchall():
                streets_names.append(i[0].lower())
            streets_names.sort()
            for i in streets_names:
                a += 1
                streets_msg += f"<code>{i}</code>\n"
                streets_check.append(i.lower())
                if a == 20:
                    a = 0
                    message_parts.append(streets_msg)
                    streets_msg = "–°–ü–†–ê–í–û–ß–ù–ò–ö\n"
            global search_results
            search_results = []
            total_pages = len(message_parts)
            current_page = 1
            global big_message
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            # big_message = await bot.send_message(message.from_id, message_parts[0], parse_mode="HTML", reply_markup=pagination_keyboard)

            async def edit_message_page(page: int, kb):
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
                global big_message
                big_message = await bot.edit_message_text(message_parts[page-1], message.from_id, big_message.message_id, parse_mode="HTML", reply_markup=kb)

            async def on_pagination_callback(callback_query):
                nonlocal current_page

                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
                data = callback_query.data
                if data == pagination_cb.new(page="prev"):
                    if current_page > 1:
                        current_page -= 1
                        pagination_keyboard = InlineKeyboardMarkup(row_width=2)
                        pagination_keyboard.add(InlineKeyboardButton("<<", callback_data=pagination_cb.new(page="prev")),
                                                InlineKeyboardButton(">>", callback_data=pagination_cb.new(page="next")))
                elif data == pagination_cb.new(page="next"):
                    if current_page < total_pages:
                        pagination_keyboard = InlineKeyboardMarkup(row_width=2)
                        pagination_keyboard.add(InlineKeyboardButton("<<", callback_data=pagination_cb.new(page="prev")),
                                                InlineKeyboardButton(">>", callback_data=pagination_cb.new(page="next")))
                        current_page += 1

                if current_page == total_pages:
                    pagination_keyboard = InlineKeyboardMarkup(row_width=2)
                    pagination_keyboard.add(InlineKeyboardButton(
                        "<<", callback_data=pagination_cb.new(page="prev")))
                if current_page == 1:
                    pagination_keyboard = InlineKeyboardMarkup(row_width=2)
                    pagination_keyboard.add(InlineKeyboardButton(
                        ">>", callback_data=pagination_cb.new(page="next")))
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await edit_message_page(current_page, kb=pagination_keyboard)
                await callback_query.answer()

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            dp.register_callback_query_handler(
                on_pagination_callback, pagination_cb.filter(), state='*')
        await send_large_message(message)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ FSM –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (STATE_STREET)
        await state.update_data(city=city)
        await RegistrationStates.STATE_STREET.set()
        with open('path/to/your/gif/file.gif', 'rb') as gif:
            await bot.send_animation(chat_id=message.chat.id, animation=gif)
        choose_street_msg = await message.answer(f'üèò –í—ã–±–µ—Ä–∏—Ç–µ —É–ª–∏—Ü—É.\n–î–æ–ø—É—Å—Ç–∏–º –≤—ã –∂–∏–≤—ë—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É –•–∏–º–µ–Ω–∫–æ –Ω–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É "—É–ª–∏—Ü–∞ –•–∏–º–µ–Ω–∫–æ" —Ç–æ–ª—å–∫–æ –ø–æ—Ç–æ–º –±–æ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç –≤–∞–º –≤—ã–±—Ä–∞—Ç—å –Ω–æ–º–µ—Ä –¥–æ–º–∞.\n–ù–∞–ø–∏—à–∏—Ç–µ <code>@deputeye_bot</code> –≤ —Å—Ç—Ä–æ–∫—É –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ–Ω –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ —É–ª–∏—Ü—É.', parse_mode="HTML", reply_markup=streets_kb)
    else:
        cities_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                cities_kb,
            ],
            resize_keyboard=False,
        )
        await message.answer("‚ùå –≠—Ç–æ—Ç –≥–æ—Ä–æ–¥ –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞–Ω —Å –æ–ø–µ—á–∞—Ç–∫–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏.", reply_markup=cities_kb)


@dp.message_handler(state=RegistrationStates.STATE_STREET)
async def street_handler(message: types.Message, state: FSMContext):
    street = message.text
    data = await state.get_data()
    city = data.get("city")
    # await message.answer(streets_check[:50])
    if street.lower() in streets_check:

        street_numbers = cur.execute(
            f"SELECT numbers FROM streets WHERE city='{city}' AND name='{street.lower()}'")
        all_numbers_string = ''
        for i in street_numbers.fetchall():
            all_numbers_string += i[0]+','

        numbers = all_numbers_string.split(',')
        a = 0
        for i in numbers:
            btn = KeyboardButton(i)
            numbers_kb.add(btn)
            numbers_check.append(i)
            a += 1
        if a == 0:
            btn = KeyboardButton('–ë–µ–∑ –Ω–æ–º–µ—Ä–∞')
            numbers_kb.add(btn)
        await state.update_data(street=street)
        await RegistrationStates.STATE_NUMBER.set()
        # await big_message.delete()
        global number_nice
        number_nice = await message.answer("‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n#Ô∏è‚É£ –í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –Ω–æ–º–µ—Ä —É–ª–∏—Ü—ã.", reply_markup=numbers_kb)
    else:
        await message.answer("‚ùå –≠—Ç–∞ —É–ª–∏—Ü–∞ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞, –ª–∏–±–æ –Ω–∞–ø–∏—Å–∞–Ω–∞ —Å –æ–ø–µ—á–∞—Ç–∫–æ–π.\n‚ùóÔ∏è –ï—Å–ª–∏ –≤–∞—à–µ–π —É–ª–∏—Ü—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ - –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å–µ–¥–Ω—é—é —É–ª–∏—Ü—É.", reply_markup=streets_kb)

# –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM (STATE_DONE)


@dp.message_handler(state=RegistrationStates.STATE_NUMBER)
async def street_handler(message: types.Message, state: FSMContext):

    number = message.text
    await state.update_data(number=number)
    if number in numbers_check:
        await state.update_data(number=number)
        await RegistrationStates.STATE_DONE.set()
        some_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                ["/again"],
            ],
            resize_keyboard=False,
        )
        data = await state.get_data()
        street = data.get("street")
        number = data.get("number")
        city = data.get("city")
        await message.answer(f"üîé –ò—â–µ–º –¥–µ–ø—É—Ç–∞—Ç–∞ –ø–æ —É–ª–∏—Ü–µ - {street} {number} –≥.{city}...")
        try:
            deputy = cur.execute(
                f"SELECT * FROM streets WHERE city='{city}' AND name='{street.lower()}' AND numbers LIKE '%{number},%' OR city='{city}' AND name='{street.lower()}' AND numbers LIKE '%{number}%'").fetchone()

            await message.answer(f"{street} {number} –≥–æ—Ä–æ–¥–∞ {city}\n\nüá∞üáø –î–µ–ø—É—Ç–∞—Ç - {deputy[4]}\n\n–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ ‚Ññ{deputy[3]}\n\n–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏: {deputy[5]}.", reply_markup=some_keyboard)
            await state.reset_state()

        except:
            await message.answer(f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - —Å–∫–æ—Ä–æ –≤—Å–µ –ø–æ—á–∏–Ω–∏–º!", reply_markup=some_keyboard)
            await state.reset_state()
    elif number == '–ë–µ–∑ –Ω–æ–º–µ—Ä–∞':
        await state.update_data(number=number)
        await RegistrationStates.STATE_DONE.set()
        some_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                ["/again"],
            ],
            resize_keyboard=False,
        )
        data = await state.get_data()
        street = data.get("street")
        number = data.get("number")
        city = data.get("city")
        await message.answer(f"üîé –ò—â–µ–º –¥–µ–ø—É—Ç–∞—Ç–∞ –ø–æ —É–ª–∏—Ü–µ - {street} {number} –≥.{city}...")
        try:
            deputy = cur.execute(
                f"SELECT * FROM streets WHERE city='{city}' AND name='{street}'").fetchone()

            await message.answer(f"{street} {number} –≥–æ—Ä–æ–¥–∞ {city}\n\nüá∞üáø –î–µ–ø—É—Ç–∞—Ç - {deputy[4]}\n\n–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ ‚Ññ{deputy[3]}\n\n–ò–∑–±–∏—Ä–∞—Ç–µ–ª—å–Ω—ã–µ —É—á–∞—Å—Ç–∫–∏: {deputy[5]}.", reply_markup=some_keyboard)
            await state.reset_state()

        except:
            await message.answer(f"‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ - —Å–∫–æ—Ä–æ –≤—Å–µ –ø–æ—á–∏–Ω–∏–º!", reply_markup=some_keyboard)
            await state.reset_state()

    else:
        numbers_keyboard = ReplyKeyboardMarkup(
            keyboard=[
                numbers_kb,
            ],
            resize_keyboard=False,
        )

        data = await state.get_data()
        street = data.get("street")
        number = data.get("number")
        await message.answer(f"–ò–∑–≤–∏–Ω–∏, –Ω–æ —É–ª–∏—Ü–∞ {street} —Å –Ω–æ–º–µ—Ä–æ–º {number} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –Ω–æ–º–µ—Ä –Ω–∞–ø–∏—Å–∞–Ω —Å –æ–ø–µ—á–∞—Ç–∫–æ–π. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏!", reply_markup=numbers_kb)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
